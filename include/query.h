/*
 * query.h
 *
 *  Created on: Nov 7, 2014
 *      Author: severin
 */

#ifndef QUERY_H_
#define QUERY_H_

const char *bs_create_bots_table = "CREATE TABLE 'BOTS' ("
		"BOT_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
		"NICKNAME VARCHAR(32) NOT NULL,"
		"PASSWORD VARCHAR(32) NOT NULL,"
		"USERNAME VARCHAR(32) NOT NULL,"
		"REALNAME VARCHAR(32) NOT NULL"
	");";

const char *ns_create_access_table = "CREATE TABLE 'NS_ACCESS'("
		"ACCESS_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
		"NICK_ID INT,"
		"MASK VARCHAR(256),"
		"FOREIGN KEY (NICK_ID) REFERENCES NICKS(NICK_ID)";

const char *ns_create_auth_status_table = "CREATE TABLE 'AUTH_STATUS'("
		"STATUS_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
		"NAME VARCHAR(32)"
		");";

const char *ns_create_auth_table =  "CREATE TABLE 'NS_AUTH'("
		"AUTH_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
		"TARGET_TYPE INT,"
		"TARGET INT,"
		"SENDER INT,"
		"RECIPIENT INT,"
		"TIME DATETIME,"
		"STATUS INT,"
		"FOREIGN KEY (TARGET_TYPE) REFERENCES TARGET_TYPE(TARGET_TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
		"FOREIGN KEY (SENDER) REFERENCES NICKS(NICK_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
		"FOREIGN KEY (RECIPIENT) REFERENCES NICKS(NICK_ID) ON DELETE CASCADE ON UPDATE CASCADE"
	");";

const char *ns_create_target_type_table = "CREATE TABLE 'TARGET_TYPE'("
		"TARGET_TYPE_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
		"NAME VARCHAR(32)"
		");";

const char *ns_create_notify_table =  "CREATE TABLE 'NS_NOTIFY'("
		"NOTIFY_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
		"NICK_ID INT,"
		"NOTIFICATION_NICK_ID INT,"
		"FOREIGN KEY (NICK_ID) REFERENCES NICKS(NICK_ID),"
		"FOREIGN KEY (NOTIFICATION_NICK_ID) REFERENCES NICKS(NICK_ID)"
		");";
const char *ns_create_nicks_table = "CREATE TABLE 'NICKS'("
		"NICK_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
		"NICKNAME VARCHAR(33),"
		"PASSWORD VARCHAR(33),"
		"MASK VARCHAR(128),"
		"REALNAME VARCHAR(256),"
		"LAST_SEEN DATETIME,"
		"REGISTERED DATETIME,"
		"HIDEMAIL TINYINT,"
		"MEMOMAX INT,"
		"URL VARCHAR(128),"
		"EMAIL VARCHAR(65),"
		"MFORWARD_TO VARCHAR(33),"
		"MFORWARD INT,"
		"NOOP TINYINT,"
		"NOMEMO TINYINT,"
		"AUTH_CHAN TINYINT,"
		"AUTH_NOTIFY TINYINT,"
		"PROTECT INT,"
		"MLOCK VARCHAR(33),"
		"MNOTIFY TINYINT"
		");";

const char *cs_create_acc_level_table = "CREATE TABLE 'ACC_LEVEL' ("
	"ACC_LEVEL_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
	"NAME VARCHAR(32)"
");";

const char *cs_create_op_type_table = "CREATE TABLE OP_TYPE ("
	"OP_TYPE_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
	"NAME VARCHAR(16)"
");";

const char *cs_create_op_list_table = "CREATE TABLE OP_LIST ("
	"OP_LIST_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
	"TYPE INT NOT NULL,"
	"NICK INT NOT NULL,"
	"ADDED_BY INT NOT NULL,"
	"ADDED_BY_ACC INT NOT NULL,"
	"ADDED_ON DATETIME,"
	"PRIMARY KEY(OP_LIST_ID),"
	"FOREIGN KEY (TYPE) REFERENCES OP_TYPE(OP_TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
	"FOREIGN KEY (NICK) REFERENCES NICKS(NICK_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
	"FOREIGN KEY (ADDED_BY) REFERENCES NICKS(NICK_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
	"FOREIGN KEY (ADDED_BY_ACC) REFERENCES ACC_LEVEL(ACC_LEVEL_ID) ON DELETE CASCADE ON UPDATE CASCADE"
");";


const char *cs_create_chans_table = "CREATE TABLE CHANS ("
   "CHAN_ID INTEGER PRIMARY KEY AUTOINCREMENT,"
   "NAME VARCHAR(33),"
   "PASSWORD VARCHAR(33),"
   "DESCRIPTION VARCHAR(256),"
   "TIME_REG DATETIME,"
   "AOP_ENABLED TINYINT,"
   "HOP_ENABLED TINYINT,"
   "SOP_ENABLED TINYINT,"
   "UOP_ENABLED TINYINT,"
   "VOP_ENABLED TINYINT,"
   "ADMIN_ENABLED TINYINT,"
   "OWNER_ENABLED TINYINT,"
   "BOT INT NULL,"
   "FOUNDER INT NOT NULL,"
   "SUCCESSOR INT NULL,"
   "MLOCK VARCHAR(33),"
   "TOPIC VARCHAR(1024),"
   "RESTRICTED TINYINT,"
   "KEEPTOPIC TINYINT,"
   "AUTOVOP TINYINT ,"
   "MEMOLEVEL INT NOT NULL,"
   "LEAVEOPS TINYINT,"
   "OPWATCH TINYINT,"
   "URL VARCHAR(64),"
   "TOPICLOCK INT,"
   "FOREIGN KEY (BOT) REFERENCES BOTS(BOT_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
   "FOREIGN KEY (FOUNDER) REFERENCES NICKS(NICK_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
   "FOREIGN KEY (SUCCESSOR) REFERENCES NICKS(NICK_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
   "FOREIGN KEY (MEMOLEVEL) REFERENCES OP_TYPE(OP_TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE,"
   "FOREIGN KEY (TOPICLOCK) REFERENCES OP_TYPE(OP_TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE"
");";

const char *load_ns_access = "SELECT NS_ACCESS.ACCESS_ID,NICKS.NICKNAME,NS_ACCESS.MASK FROM NS_ACCESS"
		" INNER JOIN NICKS ON NS_ACCESS.NICK_ID = NICKS.NICK_ID;";

const char *load_ns_notify = "SELECT MYNICK.NICKNAME,NOTIFY.NICKNAME FROM NS_NOTIFY"
		" INNER JOIN NICKS MYNICK ON NS_NOTIFY.NICK_ID = MYNICK.NICK_ID"
		" INNER JOIN NICKS NOTIFY ON NS_NOTIFY.NOTIFICATION_NICK_ID = NOTIFY.NICK_ID;";


const char *load_ns_auth = "SELECT NS_AUTH.TARGET_TYPE, "
		"CASE WHEN NS_AUTH.TARGET_TYPE = 0 THEN NOTIFY.NICKNAME ELSE CHANS.NAME END AS TARGET_NAME,"
		"SENDER.NICKNAME, RECIPIENT.NICKNAME,TIME,STATUS,ACCESS "
		"FROM NS_AUTH"
		" INNER JOIN NICKS SENDER ON NS_AUTH.SENDER = SENDER.NICK_ID"
		" INNER JOIN NICKS RECIPIENT ON NS_AUTH.RECIPIENT = RECIPIENT.NICK_ID"
		" LEFT JOIN NICKS NOTIFY ON NS_AUTH.TARGET = NOTIFY.NICK_ID"
		" LEFT JOIN CHANS ON NS_AUTH.TARGET = CHANS.CHAN_ID;";

const char *load_cs_chans = "SELECT "
		"CHANS.CHAN_ID,"
		"CHANS.NAME,"
		"CHANS.PASSWORD,"
		"CHANS.TIME_REG,"
		"CHANS.AOP_ENABLED,"
		"CHANS.HOP_ENABLED,"
		"CHANS.SOP_ENABLED,"
		"CHANS.UOP_ENABLED,"
		"CHANS.VOP_ENABLED,"
		"BOTS.NICKNAME,"
		"FOUNDER.NICKNAME,"
		"SUCCESSOR.NICKNAME,"
		"CHANS.MLOCK,"
		"CHANS.TOPIC,"
		"CHANS.TOPIC_USER,"
		"CHANS.TOPIC_TIME,"
		"CHANS.RESTRICTED,"
		"CHANS.KEEPTOPIC,"
		"CHANS.AUTOVOP,"
		"CHANS.MEMOLEVEL,"
		"CHANS.LEAVEOPS,"
		"CHANS.OPWATCH,"
		"CHANS.URL,"
		"CHANS.TOPICLOCK,"
		"CHANS.DESCRIPTION"
		" FROM CHANS"
		" INNER JOIN BOTS ON CHANS.BOT = BOTS.BOT_ID"
		" INNER JOIN NICKS FOUNDER ON CHANS.FOUNDER = FOUNDER.NICK_ID"
		" LEFT JOIN NICKS SUCCESSOR ON CHANS.SUCCESSOR = SUCCESSOR.NICK_ID;";

const char *cs_load_akick = "SELECT * FROM CS_AKICK;";

const char *cs_add_chan_query = "INSERT INTO 'CHANS' "
	   "(NAME,"
	   "PASSWORD,"
	   "DESCRIPTION,"
	   "TIME_REG ,"
	   "AOP_ENABLED,"
	   "HOP_ENABLED,"
	   "SOP_ENABLED,"
	   "UOP_ENABLED,"
	   "VOP_ENABLED,"
	   "BOT,"
	   "FOUNDER,"
	   "SUCCESSOR,"
	   "MLOCK,"
	   "TOPIC,"
	   "TOPIC_USER,"
	   "TOPIC_TIME,"
	   "RESTRICTED,"
	   "KEEPTOPIC,"
	   "AUTOVOP,"
	   "MEMOLEVEL,"
	   "LEAVEOPS,"
	   "OPWATCH,"
	   "URL,"
	   "TOPICLOCK) "
	   "VALUES('%s','%s','%s','%ld','%i','%i','%i','%i','%i','%i','%i','%i','%s','%s','%s','%ld','%i','%i','%i','%i','%i','%i','%s','%i');";


const char *cs_update_chan_query = "UPDATE 'CHANS' SET "
	   "NAME='%s',"
	   "PASSWORD='%s',"
	   "DESCRIPTION='%s',"
	   "TIME_REG='%ld',"
	   "AOP_ENABLED=%i,"
	   "HOP_ENABLED=%i,"
	   "SOP_ENABLED=%i,"
	   "UOP_ENABLED=%i,"
	   "VOP_ENABLED=%i,"
	   "BOT='%s',"
	   "FOUNDER=%i,"
	   "SUCCESSOR=%i,"
	   "MLOCK='%s',"
	   "TOPIC='%s',"
	   "TOPIC_USER='%s',"
	   "TOPIC_TIME='%ld',"
	   "RESTRICTED=%i,"
	   "KEEPTOPIC=%i,"
	   "AUTOVOP=%i,"
	   "MEMOLEVEL=%i,"
	   "LEAVEOPS=%i,"
	   "OPWATCH=%i,"
	   "URL='%s',"
	   "TOPICLOCK=%i WHERE CHANS.CHAN_ID=%i;";

const char *cs_add_nick_query = "INSERT INTO 'NICKS' "
		"NICKNAME,"
		"PASSWORD,"
		"MASK,"
		"REALNAME,"
		"LAST_SEEN,"
		"REGISTERED,"
		"HIDEMAIL,"
		"MEMOMAX,"
		"URL,"
		"EMAIL,"
		"MFORWARD_TO,"
		"MFORWARD,"
		"NOOP,"
		"NOMEMO,"
		"AUTH_CHAN,"
		"AUTH_NOTIFY,"
		"PROTECT,"
		"MLOCK,"
		"MNOTIFY) "
		"VALUES('%s','%s','%s','%s','%ld','%ld','%i','%i','%i','%s','%i','%i','%i','%i','%i','%i','%i','%s','%i');";

const char *cs_update_nick_query = "UPDATE 'NICKS' SET"
		" NICKNAME='%s',"
		"PASSWORD='%s',"
		"MASK='%s',"
		"REALNAME='%s',"
		"LAST_SEEN='%ld',"
		"REGISTERED='%ld',"
		"HIDEMAIL=%i,"
		"MEMOMAX=%i,"
		"URL='%s',"
		"EMAIL=%i,"
		"MFORWARD_TO='%s',"
		"MFORWARD=%i,"
		"NOOP=%i,"
		"NOMEMO=%i,"
		"AUTH_CHAN=%i,"
		"AUTH_NOTIFY=%i,"
		"PROTECT=%i,"
		"MLOCK='%s',"
		"MNOTIFY=%i WHERE NICKS.NICK_ID=%i;";


#endif /* QUERY_H_ */
