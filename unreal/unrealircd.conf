loadmodule "src/modules/commands.so";
loadmodule "src/modules/cloak.so";

include "help.conf";
include "badwords.channel.conf";
include "badwords.message.conf";
include "badwords.quit.conf";
include "spamfilter.conf";

/*
 * NEW: me {} 
 * OLD: M:Line 
 * me {} defines the name, description and unreal server numeric for
 * this server. Syntax is as follows: 
 * me { 
 *  name "server.name"; 
 *  info "Server Description";
 *  numeric (server numeric*);
 * }; 
 * If linking, this numeric may not be used by any other server on the network.
 */
me
{
	name "irc.reefmaster.ch";
	info "Reefmaster IRC Server";
	numeric 1;
};

/*
 * NEW: admin {} 
 * OLD: A:Line
 * Admin gives information on the server admin. you
 * may put as many lines under admin { as you wish. 
 * Syntax is as follows:
 * admin {
 *   "first line"; 
 *   "second line"; 
 *   [etc]
 * };
 */
admin {
	"Severin Mueller";
	"Fish-Guts";
	"admin@reefmaster.ch";
};

/*
 * NEW: class {} 
 * OLD: Y:line (old was confusing) 
 * These define settings for classes. A class is a group setting for 
 * connections. Example, server connections, instead of going to a client's
 * class, you direct it to the server class. Syntax is as follows
 * class (class name)
 * {
 *     pingfreq (how often to ping a user/server in seconds);
 *     maxclients (how many connections for this class);
 *     sendq (maximum send queue from a connection);
 *     recvq (maximum receive queue from a connection [flood control]);
 *  };
 */

class           clients
{
	pingfreq 90;
	maxclients 500;
	sendq 100000;
	recvq 8000;
};

class           servers
{
	pingfreq 90;
	maxclients 10;		/* Max servers we can have linked at a time */
	sendq 1000000;
	connfreq 100; /* How many seconds between each connection attempt */
};

/*
 * NEW: allow {} 
 * OLD: I:Line
 * This defines allowing of connections...
 * Basically for clients, it allows them to connect so you can have some
 * control and/or set a password. 
 * Syntax is as follows: 
 * allow {
 *    ip (ip mask to allow);
 *    hostname (host mask);
 *    class (class to send them to [see class {}]);
 *    password "(password)"; (optional)
 *    maxperip (how many connections per ip); (optional) 
 * };
 */

allow {
	ip             *@*;
	hostname       *@*;
	class           clients;
	maxperip 5;
};

/*
 * NEW: oper {} 
 * OLD: O:Line 
 * Defines an IRC Operator
 * IRC operators are there to keep sanity to the server and usually keep it
 * maintained and connected to the network. 
 * The syntax is as follows: 
 * oper (login) { 
 *     class (class to put them in, if different from I, moves them to new
 *                class); 
 *     from { 
 *        userhost (ident@host);
 *        userhost (ident@host);
 *     }; 
 *     flags
 *     { 
 *       (flags here*);
 *     };
 *     OR
 *     flags "old type flags, like OAaRD";
 * };
 */


/* For a list of oper flags, see doc/unreal32docs.html#operblock
 * [HIGHLY recommended to read]
 */

oper fish-guts {
	class           clients;
	from {
		userhost fish-guts@*;
	};
	password "hoppus123";
	flags
	{
		netadmin;
		can_die;
		can_restart;
		can_zline;
		can_gkline;
		can_gzline;
		get_umodew;
		get_host;
		can_override;
		can_addline;
	};
	swhois "is the Server's main admin";
	snomask "cFfkejGso";
};

oper admin {
	class           clients;
	from {
		userhost fish-guts@*;
	};
	password "admin";
	flags
	{
		netadmin;
		can_die;
		can_restart;
		can_zline;
		can_gkline;
		can_gzline;
		get_umodew;
		get_host;
		can_override;
		can_addline;
	};
	swhois "is the Server's main admin";
	snomask "cFfkejGso";
};

oper moebius {
	class clients;
	password "printer313";
	from {
		userhost flash@*;
	};
	flags {
		global;
		get_umodew;
		get_host;
	};
	snomask "cFfkejGso";
};

oper ircop {
	class clients;
	password "ircop";
	from {
		userhost *@*;
	};
	flags {
		global;
		get_umodew;
		get_host;
	};
	snomask "cFfkejGso";
};

oper snox {
	class clients;
	password "X9dJkrs";
	from {
		userhost *@*;
	};
	flags {
		services-admin;
		can_die;
		can_restart;
		can_zline;
		can_gkline;
		can_gzline;
		get_umodew;
		get_host;
		can_override;
		can_setq;
		can_dccdeny;
	};
	snomask "cFfkejGso";
};
	


oper ventura {
	class clients;
	password "hoppus123";
	from {
		userhost *@*;
	};
	flags {
		services-admin;
		can_die;
		can_restart;
		can_zline;
		can_gkline;
		can_gzline;
		get_umodew;
		get_host;
		can_override;
		can_setq;
		can_dccdeny;
	};
	snomask "cFfkejGso";
};

listen         *:8067;
listen         *:6667;
listen 	       *:7029;
/* NOTE: If you are on an IRCd shell with multiple IP's you are
 *       likely to get 'Address already in use' errors in your log
 *       and the ircd won't start. This means you MUST bind
 *       to a specific IP instead of '*', so for example:
 *       listen 1.2.3.4:6667;
 *       Obviously, replace the IP with the IP that was assigned to you.
 */

/*
 * NEW: link {}
 * OLD: C/N:Lines
 * This defines an okay for a server connection.
 * NOTE: BOTH SERVERS NEED A LINK {} SETTING TO CONNECT PROPERLY!
 * Syntax is as follows:
 * link (server name)
 * {
 *	username	(username, * works too);
 * 	hostname	(ip number/hostmask);
 *	bind-ip		(What IP to bind to when connecting, or *);
 *	port		(port to connect to, if any);
 *	hub (If this is a hub, * works, or servermasks it may bring in);
 *	[or leaf *;]
 *	password-connect "(pass to send)";
 *	password-receive "(pass we should receive)";
 *	class		(class to direct servers into);
 *	options {
 *		(options here*);
 *	};
 *      // If we use SSL, we can choose what cipher to use in SSL mode
 *      // Retrieve a list by "openssl ciphers", separate ciphers with :'s
 *      
 *      ciphers "DES-CBC3-MD5";
 * 
 * };
*/

/*
	options:
	OLD	|	NEW
	S		ssl
	Z		zip
	N/A		autoconnect
	N/A		quarantine
	N/A		nodnscache
*/


link            services.reefmaster.ch
{
	username	*;
	hostname 	*;
	bind-ip 	*;
	port 		7029;
	hub             *;
	password-connect "pass123";
	password-receive "pass123";
	class           servers;

};
/*
 *
 * NEW: ulines {}
 * OLD: U:Line
 * U-lines give servers more power/commands, this should ONLY be set
 * for services/stats servers and NEVER for normal UnrealIRCd servers!
 * Syntax is as follows:
 * ulines {
 *	(server to uline);
 *	(server to uline);
 *  [etc]
 * };
*/
ulines {
	services.reefmaster.ch;
	stats.reefmaster.ch;
};

/*
 * NEW: drpass {}
 * OLD: X:Line
 * This defines the passwords for /die and /restart.
 * Syntax is as follows:
 * drpass { 
 *  restart		"(password for restarting)";
 *  die		        "(password for die)";
 * };
 */
drpass {
	restart "hoppus123";
	die "hoppus123";
};

/*
 * NEW: log {} OLD: N/A Tells the ircd where and what to log(s). You can have
 * as many as you wish.
 * 
 * FLAGS: errors, kills, tkl, connects, server-connects, oper
 * 
 * Syntax: 
 * log "log file" 
 * {
 *    flags
 *    {
 *        flag;
 *        flag; 
 *        etc.. 
 *    }; 
 * };
 */

log "ircd.log" {
	/* Delete the log file and start a new one when it reaches 2MB, leave this out to always use the 
	   same log */
	maxsize 2097152;
	flags {
		oper;
		connects;
		server-connects;
		kills;
		errors;
		sadmin-commands;
		chg-commands;
		oper-override;
		spamfilter;
	};
};

/*
 * NEW: alias {}
 * OLD: N/A
 * This allows you to set command aliases such as /nickserv, /chanserv etc
 * FLAGS: services, stats, normal
 *
 * Syntax:
 * alias "name" {
 *	target "points to";
 *	type aliastype;
 * };
 *
 * [NOTE: You could also include a pre-defined alias file here, see doc/unreal32docs.html section 2.9]
 */

// This points the command /nickserv to the user NickServ who is connected to the set::services-server server
/*alias NickServ {
	target "NickServ";
	type services;
};*/

alias ns {
	target "nickserv";
	type services;
};
alias cs {
	target "chanserv";
	type services;
};
alias os {
	target "operserv";
	type services;
};
alias bs {
	target "botserv";
	type services;
};
alias ms {
	target "memoserv";
	type services;
};
alias as {
	target "adminserv";
	type services;
};
// If you want the command to point to the same nick as the command, you can leave the nick entry out
alias ChanServ { type services; };

// Points the /statserv command to the user StatServ on the set::stats-server server
alias StatServ { type stats; };

// Points the /superbot command to the user SuperBot
alias SuperBot { type normal; };


/* Standard aliases */
alias NickServ { type services; };
alias ChanServ { type services; };
alias OperServ { type services; };
alias HelpServ { type services; };
alias StatServ { type stats; };
alias BotServ { type services; };
alias MemoServ { type services; };
alias AdminServ { type services; };


/* Standard aliases */
alias "services" {
	format "^#" {
		target "chanserv";
		type services;
		parameters "%1-";
	};
	format "^[^#]" {
		target "nickserv";
		type services;
		parameters "%1-";
	};
	type command;
};


alias "identify" {
	format "^#" {
		target "chanserv";
		type services;
		parameters "IDENTIFY %1-";
	};
	format "^[^#]" {
		target "nickserv";
		type services;
		parameters "IDENTIFY %1-";
	};
	type command;
};

/* This is an example of a real command alias */
/* This maps /GLINEBOT to /GLINE <parameter> 2d etc... */
alias "glinebot" {
	format ".+" {
		command "gline";
		type real;
		parameters "%1 2d Bots are not allowed on this server, please read the faq at http://www.example.com/faq/123";
	};
	type command;
};

files
{
	/* shortmotd ircd.smotd; */

	/* Shown when an operator /OPERs up */
	/* opermotd oper.motd; */

	/* Services MOTD append. */
	/* svsmotd ircd.svsmotd; */

	/* Bot MOTD */
	/* botmotd bot.motd; */

	/* Shown upon /RULES */
	/* rules ircd.rules; */

	/* tunefile ircd.tune; */

	/* pidfile ircd.pid; */
};

ban nick {
	mask "*C*h*a*n*S*e*r*v*";
	reason "Reserved for Services";
};
ban ip {
	mask 195.86.232.81;
	reason "Delinked server";
};


ban server {
	mask eris.berkeley.edu;
	reason "Get out of here.";
};

ban user {
	mask *tirc@*.saturn.bbn.com;
        reason "Idiot";
};
ban realname {
	mask "Swat Team";
	reason "mIRKFORCE";
};

ban realname {
	mask "sub7server";
	reason "sub7";
};

except ban {
	/* don't ban stskeeps */
	mask           *stskeeps@212.*;
};


deny dcc {
	filename "*sub7*";
	reason "Possible Sub7 Virus";
};

deny channel {
	channel "*warez*";
	reason "Warez is illegal";
	class "clients";
};
vhost {
	vhost           i.hate.microsefrs.com;
	from {
		userhost       *@*.image.dk;
	};
	login           stskeeps;
	password        moocowsrulemyworld;
};

/* Network configuration */
set {
	network-name 		"Reefmaster IRC Network";
	default-server 		"irc.reefmaster.ch";
	services-server 	"services.reefmaster.ch";
	stats-server 		"stats.reefmaster";
	help-channel 		"#help";
	hiddenhost-prefix	"reef";
	cloak-keys {
		"aoAr1HnR6gl3sJ7hVz4Zb7x4YwpW";
		"AjH8r4kjfhJsheidshJher5nNnew";
		"Gre095GRGe3t43redsDHmew45D36";
	};
	hosts {
		local		"ircops.reefmaster.ch";
		global		"ircops.reefmaster.ch";
		coadmin		"ircops.reefmaster.ch";
		admin		"admins.reefmaster.ch";
		servicesadmin 	"admins@reefmaster.ch";
		netadmin 	"admins@reefmaster.ch";
		host-on-oper-up "yes";
	};
};

/* Server specific configuration */

set {
	kline-address "admin@reefmaster.ch";
	modes-on-connect "+ixw";
	modes-on-oper	 "+xwgs";
	oper-auto-join "#ircops";
	options {
		hide-ulines;
		show-connect-info;
	};

	maxchannelsperuser 10;
	anti-spam-quit-message-time 10s;
	/* static-quit "Client quit";	*/
	/* static-part yes; */

	oper-only-stats "okfGsMRUEelLCXzdD";

	throttle {
		connections 3;
		period 60s;
	};

	anti-flood {
		nick-flood 3:60;
	};

	spamfilter {
		ban-time 1d;
		ban-reason "Spam/Advertising";
		virus-help-channel "#help";
	};
};
